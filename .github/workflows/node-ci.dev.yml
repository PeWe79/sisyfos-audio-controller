name: Dev Node CI

env:
    node-version: 18
    node-package-manager: yarn

on:
    push:
        branches:
            - 'develop'
            - 'release50'
            - 'EAV-*'
jobs:
    cache-dependencies:
        runs-on: ubuntu-latest
        steps:
            - name: Access repository
              uses: actions/checkout@v4
            - uses: ./.github/actions/cache
            - name: Install dependencies
              run: yarn install --frozen-lockfile

    test:
        runs-on: ubuntu-latest
        needs: cache-dependencies
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            - name: Access repository
              uses: actions/checkout@v4
            - uses: ./.github/actions/test

    #  validate-dependencies:
    #    runs-on: ubuntu-latest
    #    permissions:
    #      contents: read
    #      packages: write
    #      id-token: write
    #    steps:
    #      - name: Access repository
    #        uses: actions/checkout@v4
    #      - uses: ./.github/actions/validate-dependencies

    build:
        runs-on: ubuntu-latest
        needs:
            - test
        steps:
            - name: Access repository
              uses: actions/checkout@v4

            - uses: ./.github/actions/cache

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Build
              run: yarn build

            - name: Upload client build artifact
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ github.event.repository.name }}-client-develop
                  path: client/dist

            - name: Upload server build artifact
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ github.event.repository.name }}-server-develop
                  path: server/dist

    publish-docker-image:
        runs-on: ubuntu-latest
        needs:
            - build
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            - name: Access repository
              uses: actions/checkout@v4

            - uses: actions/download-artifact@v3
              with:
                  name: ${{ github.event.repository.name }}-client-develop
                  path: client/dist

            - uses: actions/download-artifact@v3
              with:
                  name: ${{ github.event.repository.name }}-server-develop
                  path: server/dist

            - name: Determine if images should be published to ecr
              id: ecrrepo
              run: |
                  # check if a release branch, or master, or a tag
                  if [[ "${{ github.ref }}" =~ ^refs/heads/release([0-9]+)$ || "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == refs/tags/* || "${{ github.ref }}" == refs/heads/EAV-* || "${{ github.ref }}" == refs/heads/develop  ]]
                  then
                    ECRREPO_PUBLISH="1"
                  else
                    ECRREPO_PUBLISH="0"
                  fi
                  # debug output
                  echo "ecrrepo-publish $ECRREPO_PUBLISH"
                  echo "ecrrepo-publish=$ECRREPO_PUBLISH" >> $GITHUB_OUTPUT
            - name: Configure AWS Credentials
              if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
                  aws-region: ${{ secrets.AWS_REGION }}
            - name: Login to Amazon ECR
              id: login-ecr
              if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
              uses: aws-actions/amazon-ecr-login@v1
            - name: Get the Docker tag for ecr
              id: ecr-tag
              if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
              uses: docker/metadata-action@v5
              with:
                  images: ${{ steps.login-ecr.outputs.registry }}/sisyfos-audio-controller
                  tags: |
                      type=schedule
                      type=ref,event=branch
                      type=ref,event=tag
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push docker image tags
              if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ecr-tag.outputs.tags != 0
              id: docker_build
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  labels: ${{ steps.ecr-tag.outputs.labels }}
                  tags: '${{ steps.ecr-tag.outputs.tags }}'
