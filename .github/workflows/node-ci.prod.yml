#######################################################################################################################
#
#   Node CI - Production
#
#   The workflow ensures quality for the build, builds the project and publishes it to the configured destinations.
#   There are the following destinations:
#
#   [Github Release]
#     The destination is only triggered if the secret 'RELEASE_TO_GITHUB' is set to a non-empty value.
#
#   [NPM]
#     The destination is only triggered if the secret 'NPM_TOKEN' is provided.
#
#   [Docker Hub]
#     The destination is only triggered if the secrets 'DOCKER_USERNAME' and 'DOCKER_PASSWORD' are
#     provided.
#
#######################################################################################################################

name: Prod Node CI

env:
  node-version: 18
  node-package-manager: yarn

on:
  push:
    branches:
      - "master"
      - "main"

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Access repository
        uses: actions/checkout@v4
      - uses: ./.github/actions/cache
      - name: Install dependencies
        run: yarn install --frozen-lockfile

  prebuild:
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - name: Access repository
        uses: actions/checkout@v4
      - uses: ./.github/actions/cache
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build
        run: yarn build

  test:
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - name: Access repository
        uses: actions/checkout@v4

      - uses: ./.github/actions/test

  validate-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Access repository
        uses: actions/checkout@v4
      - uses: ./.github/actions/validate-dependencies

  bump-version:
    runs-on: ubuntu-latest
    needs:
      - prebuild
      - test
      - validate-dependencies
    outputs:
      tag_version: ${{ steps.tag_version.outputs.new_tag || steps.tag_version.outputs.previous_tag }}
      version: ${{ steps.tag_version.outputs.new_version || steps.tag_version.outputs.previous_version }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
      bumped: ${{ steps.tag_version.outputs.new_tag != '' }}
      commit_sha: ${{ steps.commit_sha.outputs.commit_sha }}
    steps:
      - name: Access repository
        uses: actions/checkout@v4
      - name: Configure committer
        run: |
          git config user.name "${{ github.event.pusher.name }}"
          git config user.email "${{ github.event.pusher.email }}"
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
      - name: Update package.json
        if: steps.tag_version.outputs.new_tag != ''
        uses: jossef/action-set-json-field@v2.1
        with:
          file: package.json
          field: version
          value: ${{ steps.tag_version.outputs.new_version }}
      - name: Update CHANGELOG.md
        env:
          changes: ${{ steps.tag_version.outputs.changelog }}
        run: |
          echo "$changes" > /tmp/tmp-changelog.md
          [ -f CHANGELOG.md ] && cat CHANGELOG.md >> /tmp/tmp-changelog.md
          mv /tmp/tmp-changelog.md CHANGELOG.md

      - name: Commit and push changes to package.json and CHANGELOG.md
        id: commit_sha
        if: steps.tag_version.outputs.new_tag != ''
        uses: EndBug/add-and-commit@v9
        with:
          add: "['package.json', 'CHANGELOG.md']"

  create-pull-request-develop:
    runs-on: ubuntu-latest
    if: needs.bump-version.outputs.bumped == 'true'
    needs:
      - bump-version
    steps:
      - name: Access repository
        uses: actions/checkout@v4
      - name: Pull request to develop
        id: develop
        continue-on-error: true
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "develop"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_label: "release, automated-pr"
          pr_title: "Release ${{ needs.bump-version.outputs.version }} -> develop"
      - name: Report status
        env:
          report: ${{ toJSON(steps.develop.outcome) }} - ${{ toJSON(steps.develop.conclusion) }}
        run: echo $report

  build:
    runs-on: ubuntu-latest
    needs:
      - bump-version
    steps:
      - name: Access repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump-version.outputs.commit_sha }}
      - name: Ensure commits from bump-version
        run: git pull
      - uses: ./.github/actions/cache
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build
        run: yarn build
      - name: Upload client build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-client
          path: client/dist
      - name: Upload server build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-server
          path: server/dist

  build-desktop:
    runs-on: windows-latest
    needs:
      - bump-version
      - build
    steps:
      - name: Access repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump-version.outputs.commit_sha }}
      - name: Ensure commits from bump-version
        run: git pull
      - uses: ./.github/actions/cache
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-client
          path: client/dist
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-server
          path: server/dist
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build desktop
        run: yarn build:desktop
      - name: Upload desktop build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-desktop
          path: desktop/dist

  publish-ecr-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs:
      - bump-version
    steps:
      - name: Access repository
        uses: actions/checkout@v4
      - name: Configure publisher
        run: |
          git config user.name "${{ github.event.pusher.name }}"
          git config user.email "${{ github.event.pusher.email }}"
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: dist
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Publish package
        run: yarn publish --access=public --tag latest --new-version "${{ needs.bump-version.outputs.version }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.AWS_ROLE_ARN }}

  publish-docker-image:
    runs-on: ubuntu-latest
    needs:
      - bump-version
    steps:
      - name: Access repository
        uses: actions/checkout@v4

      - name: Extract version for tags
        id: version
        uses: ./.github/actions/extract-version
        with:
          version: ${{ needs.bump-version.outputs.version }}

      - name: Determine if images should be published to ecr
        id: ecrrepo
        run: |
          # check if a release branch, or master, or a tag
          if [[ "${{ github.ref }}" =~ ^refs/heads/release([0-9]+)$ || "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == refs/tags/* || "${{ github.ref }}" == refs/heads/EAV-* ]]
          then
            ECRREPO_PUBLISH="1"
          else
            ECRREPO_PUBLISH="0"
          fi
          # debug output
          echo "ecrrepo-publish $ECRREPO_PUBLISH"
          echo "ecrrepo-publish=$ECRREPO_PUBLISH" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            "${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:latest"
            "${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.version }}"
            "${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.major }}"
            "${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}"

